// import React, { useEffect, useState, useRef, useContext } from 'react'
// import { Heading, Paragraph, SpaceVertical } from '@looker/components'
// import { SandboxStatus } from '../SandboxStatus'
// import { HomeProps } from './types'
// import { CSVReader } from 'react-papaparse'
// import { Grid, Container, Header, Segment, Button, Input } from 'semantic-ui-react'
// import { AgGridReact } from 'ag-grid-react';
// import { ADDRGETNETWORKPARAMS } from 'dns'
// import {
//   ExtensionContext,
//   ExtensionContextData,
//   getCore40SDK
// } from '@looker/extension-sdk-react'
// var GitHub = require('github-api');
// const { Octokit } = require("@octokit/core");
// const { v4: uuidv4 } = require('uuid');

// export const Home: React.FC<HomeProps> = () => {

//   const extensionContext = useContext<ExtensionContextData>(ExtensionContext)
//   const { extensionSDK } = extensionContext
//   const core40SDK = getCore40SDK()

//   const [agData, setAgData] = useState<any>({
//     columnDefs: null,
//     rowData: null,
//     ready: false
//   })

//   const [definitionsGrid,setDefinitionsGrid] = useState<any>(null)

//   const [tableProps, setTableProps] = useState<any>({
//     columnDefs: null,
//     rowData: null
//   })
//   const [insertDB,setInsertDB] = useState(true)
//   const tableName = useRef<any>(null)
//   const [exploreDisabled, setExploreDisabled] = useState<any>({
//     disabled: true,
//     exploreName: null
//   })

//   //set the datagroup that you want to be used - it should be a dedicated one for this extension as the CSV's will want to be
//   // persisted for a long time.
//   const datagroupTrigger = 'csv_uploader_sandbox_default_datagroup'
//   const scratchSchema = 'looker_scratch'

//   //set an authorization token for github
//   const octokit = new Octokit({
//     auth: "fff06ed5cb7288207c3c84893ebde54bc8b0a7cd",
//   });

//   //function to write the file to your git repository
//   const gitWrite = async function gitWrite(file:any,fileName:string) {
//     file = btoa(file)
//     try {
//       // change the git information to match where you want it to go
//       let result = await octokit.request('PUT /repos/{owner}/{repo}/contents/{path}', {
//         owner: 'groodlooker',
//         repo: 'csv_extension',
//         path: fileName + '.view.lkml',
//         message: 'this lookml was generated by CSV-loader 3000 - a user uploaded this from the Looker extension',
//         content: file
//       })
//       return result
//     } catch (err) {
//       console.log(err)
//     }
//   }
  
//   const handleOnDrop = (data:any) => {
//     // console.log('---------------------------')
//     // console.log(data)
//     let fields: Array<string> = data[0]['meta']['fields']
//     //preview table column definitions
//     const agCols = fields.map((cv:string) => ({
//       headerName: cv,
//       field: cv,
//       filter: true,
//       sortable: true
//     }))
//     //user defined table definitions
//     const colDefs = fields.map((df:string) => ({
//       column: df,
//       newColName: null,
//       drills: null
//     }))
//     //rows for preview table
//     let agRows: Array<any> = data.map((r: any) => {
//       // console.log(r.data)
//       return r.data
//     })

//     const agObj = {
//       columnDefs: agCols,
//       rowData: agRows,
//       ready: true
//     }

//     const updatedProps = {
//       columnDefs: [
//         {
//           headerName: "Column Name",
//           field: "column",
//           sortable: true
//         },
//         {
//           headerName: "New Name",
//           field: "newColName",
//           editable: true
//         },
//         {
//           headerName: "Drill Fields",
//           field: "drills",
//           editable: true
//         }
//       ],
//       rowData: colDefs
//     }
//     // console.log(agRows)
//     // console.log(updatedProps)
//     setTableProps(updatedProps)
//     setAgData(agObj)
//     // setColumnDefs(agCols)
//     // setRowData(agRows)
//     console.log('---------------------------')
//   }
 
//   const handleOnError = (err:any, file:any, inputElem:any, reason:any) => {
//     console.log(err)
//   }
 
//   const handleOnRemoveFile = (data:any) => {
//     const clearAg = {
//       columnDefs: null,
//       rowData: null
//     }
//     const disExp = {
//       disabled: true,
//       exploreName: null
//     }
//     setAgData(clearAg)
//     setExploreDisabled(disExp)
//   }

//   const csvProps = {
//     dynamicTyping: true,
//     header: true
//   }

//   const optsString = '<span style="padding: 10px; border: 2px solid #444; background: blueviolet; color: white;">Please upload your data</span>'

//   const opts = {
//     overlayLoadingTemplate: optsString,
//     overlayNoRowsTemplate: optsString
//   }

//   const onFirstDataRendered = (grid:any) => {
//     console.log(grid)
//     grid.api.sizeColumnsToFit()
//     setDefinitionsGrid(grid)
//   }

//   var userInputGridOptions = {
//     overlayLoadingTemplate: optsString,
//     overlayNoRowsTemplate: optsString,
//     onFirstDataRendered: onFirstDataRendered
//   };

//   const handleNewMetaData = () => {
//     definitionsGrid.api.selectAll()
//     var demRows = definitionsGrid.api.getSelectedRows()
//     definitionsGrid.api.deselectAll()
//     return demRows
//   }

//   // let result = [1,2,3].reduce( (accumulatorPromise, nextID) => {
//   //   return accumulatorPromise.then(() => {
//   //     return methodThatReturnsAPromise(nextID);
//   //   });
//   // }, Promise.resolve());

//   const sqlRunnerDDL = async (query:string) => {
//     // alternate mechanism to get sdk. Note getCore31SDK is also available
//     // but getCore40SDK provides access to newer functionality
//     try {
//       const value = await core40SDK.ok(
//         core40SDK.create_sql_query({
//           sql: query,
//           connection_name: 'gbq'
//         })
//       )
//       return value.slug
//     } catch (error) {

//     }
//   }

//   const runSQLRunnerQuery = async (slug:any) => {
//     try {
//       const result = await core40SDK.ok(
//         core40SDK.run_sql_query(slug,"json")
//       )
//       return result
//     } catch (error) {

//     }
//   }

//   var tbname = ''
//   const buildLookML = (items:any) => {
//     var newMeta = handleNewMetaData()
//     var sqlInsertChunks:Array<string> = []
//     // console.log(newMeta)
//     tbname = tableName.current.value + "_" + uuidv4().replace(/\W/g,"_").toLowerCase()
//     var dbstr = '';
//     let viewFile = 'explore: ' + tbname + ' {label:"'+tableName.current.value+'"} view: ' + tbname + ' {label:"'+tableName.current.value+'" derived_table: { datagroup_trigger: '+datagroupTrigger+' create_process: { sql_step: create table ${SQL_TABLE_NAME} ('
//     let sqlRunnerQuery = 'create or replace table `'+scratchSchema+'.' + tbname + '` ('
//     const data = agData.rowData.slice()
//     if(insertDB) {
//       const dims = data[0]
//       const dimsLen = Object.keys(dims).length
//       var ln = 1
//       var lkmlstr = ''

//       const chunked_arr = [];
//       let index = 0;

//       while (index < data.length) {
//         chunked_arr.push(data.slice(index, 500 + index));
//         index += 500;
//       }
//       // console.log(chunked_arr.length)
//       for (var d in dims) {
//         var tmpstr;
//         let dtype = typeof dims[d] 
//         tmpstr = d.replace(/\W/g,"_").toLowerCase()
//         lkmlstr += 'dimension: ' + tmpstr
//         var dbtype = 'string'
//         if(dtype == 'number') {
//           dbtype = 'numeric'
//           lkmlstr += "{type:number}"
//         } else {
//           lkmlstr += "{type:string}"
//         }
//         tmpstr += " " + dbtype 
//         if (ln == dimsLen) {
//         } else {
//           tmpstr += ","
//         }
//         dbstr += tmpstr
//         ln += 1
//       }
//       sqlRunnerQuery += dbstr + ");"
//       viewFile += dbstr + ");;"
//       sqlInsertChunks.push(sqlRunnerQuery)
//       // console.log(viewFile)
      
//       for (let index = 0; index < chunked_arr.length; index++) {
//         var newSQLstep = 'sql_step: INSERT ${SQL_TABLE_NAME} VALUES '
//         var sqlRunnerStep = 'INSERT `' + scratchSchema + '.' + tbname + '` VALUES '
//         // viewFile += 'sql_step: INSERT ${SQL_TABLE_NAME} VALUES'
//         const data = chunked_arr[index];
//         var insertValues = ''
//         data.forEach((item:any,index:number,array:Array<any>) => {
//           if (Object.keys(item).length == dimsLen) {
//             var comma = 1
//             var valstr = '('
//             for (var i in item){
//               if (typeof item[i] == 'string') {
//                 valstr += "'" + item[i].replace(/'/g,"\\'") + "'"
//               } else {
//                 valstr += item[i]
//               }
//               if (comma == dimsLen) {
//                 valstr += "),"
//               } else {
//                 valstr += ","
//               }
//               comma += 1
//             }
//             insertValues += valstr
//           }
//         })
//         if (insertValues.length > 0) {
//           newSQLstep += insertValues.slice(0,-1)
//           sqlRunnerStep += insertValues.slice(0,-1)
//           sqlRunnerStep += ";"
//           newSQLstep += ";;"
//           sqlRunnerQuery += sqlRunnerStep
//           viewFile += newSQLstep
//           sqlInsertChunks.push(sqlRunnerStep)
//         }
//       }
//       console.log(sqlInsertChunks)
      
//       //   for (const file of files) {
//       //     const contents = await fs.readFile(file, 'utf8');
//       //     console.log(contents);
//       //   }
//       // }

//       // const allSlugs = async() => {
//       //   return sqlInsertChunks.reduce((sqlRunnerDDL, current) => (
//       //     sqlRunnerDDL(current).then(sqlRunnerDDL)
//       //   ))
//       //   for (const chunk of sqlInsertChunks) {
//       //     sqlRunnerDDL(chunk).then((c) => {
//       //       slugArray.push(c?.slug)
//       //     })
//       //   }
//       // }
//       // console.log(asyncRes);
//       var slugArray:any = []
//       const allSlugs = async() => {
//         for (const chunk of sqlInsertChunks) {
//           slugArray.push(sqlRunnerDDL(chunk))
//           // sqlRunnerDDL(chunk).then((c) => {
//           //   slugArray.push(c?.slug)
//           // })
//         }
//         Promise.all(slugArray).then((sluggums:any) => {
//           console.log(sluggums)
//           var resultArray:any = []
//           for (const slugger of sluggums) {
//             resultArray.push(runSQLRunnerQuery(slugger))
//           }
//           Promise.all(resultArray).then((res) => {
//             console.log('your table has been built')
//           })
//         })
//       }

//       allSlugs()

//       // Promise.all(slugArray).then((p)=>{
//       //   console.log(p)
//       // })
//       // allSlugs().then((sli) => {
//       //   console.log(slugArray)
//       // }) 
//       // sqlRunnerDDL(sqlRunnerQuery).then((slug) => {
//       //   let slugID = slug?.slug
//       //   runSQLRunnerQuery(slugID).then((qr) => {
//       //     console.log(qr)
//       //   })
//       // })
      
//       // console.log(sqlRunnerQuery)
//       viewFile += "}} " + lkmlstr + "measure: count {type:count}}"
//       gitWrite(viewFile,tbname).then((p) => {
//         if(p.status == 201){
//           console.log('successfully created the explore')
//           var exp = {
//             disabled: false,
//             exploreName: tbname
//           }
//           setExploreDisabled(exp)
//         } else {
//           console.log('something went wrong')
//         }
//       })
//     } else {
//       // placeholder for union all syntax for non-bigquery datasets, future feature
//     }
//   }

//   const exploreData = () => {
//     extensionSDK.openBrowserWindow('/explore/csv_uploader_sandbox/'+exploreDisabled.exploreName, '_'+exploreDisabled.exploreName)
//   }
 
//   return (
//     <>
//     <Segment
//     textAlign={"center"}
//     padded={true} 
//     >
//     <Header
//       as='h1'
//       content='Welcome to CSV Loader-3000'
//       style={{
//         fontSize: '4em',
//         fontWeight: 'normal'
//       }}
//     />
//     </Segment>
//     <Grid>
//       <Grid.Row columns={3}>
//         <Grid.Column>
//         </Grid.Column>
//         <Grid.Column>
//         <CSVReader
//         onDrop={handleOnDrop}
//         onError={handleOnError}
//         config={csvProps}
//         addRemoveButton
//         onRemoveFile={handleOnRemoveFile}
//       >
//         <span>Drop CSV file here to upload.</span>
//       </CSVReader>
//         </Grid.Column>
//         <Grid.Column>
//         </Grid.Column>
//       </Grid.Row>
//       <Grid.Row columns={1}>
//       <div
//         className="ag-theme-alpine"
//         style={{
//         height: '250px',
//         width: '100%' }}
//       >
//       <AgGridReact
//           gridOptions={opts}
//           columnDefs={agData.columnDefs}
//           rowData={agData.rowData}>
//         </AgGridReact>
//       </div>
//       </Grid.Row>
//       <Grid.Row columns={3}>
//         <Grid.Column>
//         </Grid.Column>
//         <Grid.Column>
//         <Input
//            placeholder='Table Name (lowercase no spaces)'
//            type='text'
//            action
//           >
//           <input ref={tableName}/>
//           <Button
//           disabled={!agData.ready}
//           onClick={buildLookML}
//           >Build My Explore</Button>
//           </Input>
//         </Grid.Column>
//         <Grid.Column>
//           <Button disabled={exploreDisabled.disabled}
//           onClick={exploreData}
//           >Explore the data</Button>
//         </Grid.Column>
//       </Grid.Row>
//       <Grid.Row columns={3}>
//         <Grid.Column></Grid.Column>
//       <Grid.Column>
//       <div
//         className="ag-theme-alpine"
//         style={{
//         height: '500px',
//         width: '600px' }}
//       >
//       <AgGridReact
//           gridOptions={userInputGridOptions}
//           columnDefs={tableProps.columnDefs}
//           rowData={tableProps.rowData}>
//         </AgGridReact>
//       </div>
//       </Grid.Column>
//       <Grid.Column></Grid.Column>
//       </Grid.Row>
//     </Grid>
//     </>
//   )
// }
